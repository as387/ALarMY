# -*- coding: utf-8 -*-

# === 1. –ò–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
import os
import logging
import json
import re
import uuid
import threading
from time import sleep
from datetime import datetime, timedelta

import requests
from flask import Flask, request
import telebot
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone, utc

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.environ.get("BOT_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨")
WEATHER_API_KEY = os.environ.get("WEATHER_API_KEY", "7c70d84340f4e9b9e99874cd465aefa8")
ADMIN_ID = 941791842
WEBHOOK_URL = 'https://din-js6l.onrender.com'

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
scheduler = BackgroundScheduler(timezone=utc)
moscow_tz = timezone('Europe/Moscow')

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ---
reminders = {}
user_settings = {}  # { "user_id": {"city": "–ú–æ—Å–∫–≤–∞", "notification_time": "07:30", "notifications_on": False}}

# === 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞) ===

def save_data(data, filename):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON."""
    try:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4, default=str)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")

def load_data(filename, default_value):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON."""
    try:
        with open(filename, "r", encoding="utf-8") as f:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ user_id –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ —á–∏—Å–ª–∞
            data = json.load(f)
            return {str(k): v for k, v in data.items()}
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default_value
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {filename}. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default_value

# === 3. –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===

def get_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞")
    )
    return keyboard

def get_weather_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"))
    keyboard.add(types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã"))
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return keyboard

def get_weather_settings_keyboard(user_id):
    settings = user_settings.get(str(user_id), {})
    notifications_on = settings.get('notifications_on', False)
    status_text = "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if notifications_on else "‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"))
    keyboard.add(types.KeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è"))
    keyboard.add(types.KeyboardButton(status_text))
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã"))
    return keyboard

def get_back_to_menu_keyboard(weather=False):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if weather:
        keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã"))
    else:
        keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return keyboard
    
def create_reminder_inline_keyboard(reminder_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"rem_done_{reminder_id}"),
        types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"rem_delete_{reminder_id}")
    )
    return keyboard

# === 4. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def ensure_user_data_exists(user_id):
    user_id_str = str(user_id)
    if user_id_str not in reminders:
        reminders[user_id_str] = []
    if user_id_str not in user_settings:
        user_settings[user_id_str] = {
            "city": "–ú–æ—Å–∫–≤–∞",
            "notification_time": "07:30",
            "notifications_on": False
        }

def parse_reminder_text(text):
    now = datetime.now(moscow_tz)
    full_match = re.match(r'^(\d{1,2})[.,](\d{1,2})\s+(\d{1,2})[.,:](\d{2})\s+(.+)', text.strip())
    if full_match:
        day, month, hour, minute, event = full_match.groups()
        dt_moscow = moscow_tz.localize(datetime(now.year, int(month), int(day), int(hour), int(minute)))
        return dt_moscow, event
    time_match = re.match(r'^(\d{1,2})[.,:](\d{2})\s+(.+)', text.strip())
    if time_match:
        hour, minute, event = time_match.groups()
        dt_moscow = moscow_tz.localize(datetime(now.year, now.month, now.day, int(hour), int(minute)))
        if dt_moscow < now:
            dt_moscow += timedelta(days=1)
        return dt_moscow, event
    return None, None

def parse_time_input(text):
    match = re.match(r'^(\d{1,2})[.,:](\d{2})$', text.strip())
    if match:
        hour, minute = map(int, match.groups())
        if 0 <= hour <= 23 and 0 <= minute <= 59:
            return f"{hour:02d}:{minute:02d}"
    return None

# === 5. –õ–æ–≥–∏–∫–∞ –ø–æ–≥–æ–¥—ã ===

def get_and_format_24h_forecast(city):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞."""
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()

        # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
        current = data['list'][0]
        description = current['weather'][0]['description'].capitalize()
        temp = round(current['main']['temp'])
        
        weather_text = (
            f"üìç –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: *{city}*\n\n"
            f"–°–µ–π—á–∞—Å: *{description}*, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ *{temp}¬∞C*\n\n"
            f"üóìÔ∏è *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞:*\n"
        )
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 8 –ø–µ—Ä–∏–æ–¥–æ–≤ (24 —á–∞—Å–∞)
        forecast_lines = []
        for forecast in data['list'][:8]:
            dt_moscow = datetime.fromtimestamp(forecast['dt']).astimezone(moscow_tz)
            time_str = dt_moscow.strftime('%H:%M')
            temp_str = f"{round(forecast['main']['temp'])}¬∞C"
            desc_str = forecast['weather'][0]['description']
            forecast_lines.append(f"`{time_str}` - {temp_str}, {desc_str}")
        
        return weather_text + "\n".join(forecast_lines)

    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 404:
            return f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        else:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")
            return "üå¶Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")
        return "üå¶Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞."


# === 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ===

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    ensure_user_data_exists(user_id)
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –£–º–µ—é —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É.",
        reply_markup=get_main_menu_keyboard()
    )

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö: –û–¢–ü–†–ê–í–ö–ê –ò–ù–°–¢–†–£–ö–¶–ò–ò –§–ê–ô–õ–û–ú ---
@bot.message_handler(commands=['help'])
def handle_help(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –≤–∏–¥–µ .txt —Ñ–∞–π–ª–∞."""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ ('rb') –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        with open("instruction_extended.txt", "rb") as instruction_file:
            bot.send_document(
                message.chat.id,
                instruction_file,
                caption="üìò –í–æ—Ç –ø–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."
            )
    except FileNotFoundError:
        logger.error("–§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ 'instruction_extended.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. üòî")
    except Exception as e:
        # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤ –∏ —Ç.–¥.
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π.")
# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def handle_back_to_main_menu(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())

# --- –ë–ª–æ–∫ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
@bot.message_handler(func=lambda message: message.text in ["üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"])
def handle_reminders_menu(message):
    user_id = str(message.from_user.id)
    ensure_user_data_exists(user_id)
    if message.text == "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        user_reminders = reminders.get(user_id, [])
        if not user_reminders:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=get_main_menu_keyboard())
            return
        
        sorted_reminders = sorted(user_reminders, key=lambda x: x['time'])
        
        if not sorted_reminders:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=get_main_menu_keyboard())
            return

        bot.send_message(message.chat.id, "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=get_main_menu_keyboard())
        for rem in sorted_reminders:
            dt_moscow = datetime.fromisoformat(rem['time']).astimezone(moscow_tz)
            text = f"üóìÔ∏è *{dt_moscow.strftime('%d.%m –≤ %H:%M')}*\n_{rem['text']}_"
            bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=create_reminder_inline_keyboard(rem['id']))

    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ß–ß:–ú–ú —Å–æ–±—ã—Ç–∏–µ`\n–∏–ª–∏\n`–î–î.–ú–ú –ß–ß:–ú–ú —Å–æ–±—ã—Ç–∏–µ`", parse_mode='Markdown', reply_markup=get_back_to_menu_keyboard())
        bot.register_next_step_handler(msg, process_new_reminder)


def process_new_reminder(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é": return handle_back_to_main_menu(message)
    user_id = str(message.from_user.id)
    ensure_user_data_exists(user_id)
    reminder_dt_moscow, event = parse_reminder_text(message.text)
    if not reminder_dt_moscow or not event:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: `19:30 –£–∂–∏–Ω`", parse_mode='Markdown', reply_markup=get_back_to_menu_keyboard())
        bot.register_next_step_handler(msg, process_new_reminder)
        return
    reminder_dt_utc = reminder_dt_moscow.astimezone(utc)
    reminder_id = str(uuid.uuid4())
    new_reminder = {"id": reminder_id, "time": reminder_dt_utc.isoformat(), "text": event, "user_id": user_id}
    reminders[user_id].append(new_reminder)
    save_data(reminders, 'reminders.json')
    scheduler.add_job(send_reminder, trigger='date', run_date=reminder_dt_utc, args=[user_id, new_reminder], id=reminder_id)
    bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *{reminder_dt_moscow.strftime('%d.%m.%Y –≤ %H:%M')}*", parse_mode='Markdown', reply_markup=get_main_menu_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith('rem_'))
def handle_reminder_callback(call):
    user_id = str(call.from_user.id)
    action, reminder_id = call.data.split('_')[1:]
    found_rem = next((rem for rem in reminders.get(user_id, []) if rem['id'] == reminder_id), None)
    if not found_rem:
        bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="~~" + call.message.text + "~~", parse_mode='Markdown')
        return
    reminders[user_id].remove(found_rem)
    save_data(reminders, 'reminders.json')
    try: scheduler.remove_job(reminder_id)
    except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    message_text = f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {found_rem['text']}" if action == 'done' else f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {found_rem['text']}"
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=message_text)
    bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ!")

# --- –ë–ª–æ–∫ –ü–æ–≥–æ–¥—ã ---

@bot.message_handler(func=lambda message: message.text == "üå§ –ü–æ–≥–æ–¥–∞")
def handle_weather_menu(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_weather_menu_keyboard())

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã")
def handle_back_to_weather_menu(message):
    handle_weather_menu(message)

@bot.message_handler(func=lambda message: message.text == "üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
def handle_today_weather(message):
    user_id = str(message.from_user.id)
    ensure_user_data_exists(user_id)
    city = user_settings.get(user_id, {}).get('city', '–ú–æ—Å–∫–≤–∞')
    bot.send_chat_action(message.chat.id, 'typing')
    forecast_text = get_and_format_24h_forecast(city)
    bot.send_message(message.chat.id, forecast_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã")
def handle_weather_settings(message):
    user_id = str(message.from_user.id)
    ensure_user_data_exists(user_id)
    settings = user_settings[user_id]
    text = (
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã*\n\n"
        f"–ì–æ—Ä–æ–¥: *{settings.get('city', '–ù–µ –∑–∞–¥–∞–Ω')}*\n"
        f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: *{settings.get('notification_time', '07:30')}*\n"
        f"–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: *{'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('notifications_on') else '–í—ã–∫–ª—é—á–µ–Ω—ã'}*"
    )
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=get_weather_settings_keyboard(user_id))

@bot.message_handler(func=lambda message: message.text == "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
def handle_change_city(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_city_input)

def process_city_input(message):
    user_id = str(message.from_user.id)
    city = message.text.strip()
    test_url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}"
    try:
        if requests.get(test_url, timeout=5).status_code != 200:
            bot.send_message(message.chat.id, f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_weather_menu_keyboard())
            return
    except requests.RequestException:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ä–æ–¥.", reply_markup=get_weather_menu_keyboard())
        return
    user_settings[user_id]['city'] = city
    save_data(user_settings, 'user_settings.json')
    bot.send_message(message.chat.id, f"‚úÖ –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *{city}*.", parse_mode='Markdown', reply_markup=get_weather_menu_keyboard())
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞
    if user_settings[user_id].get('notifications_on', False):
        schedule_weather_job(user_id)

@bot.message_handler(func=lambda message: message.text == "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è")
def handle_change_time(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `08:00` –∏–ª–∏ `19.30`).", parse_mode='Markdown', reply_markup=get_back_to_menu_keyboard(weather=True))
    bot.register_next_step_handler(msg, process_time_input)

def process_time_input(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã":
        return handle_weather_menu(message)
    user_id = str(message.from_user.id)
    new_time = parse_time_input(message.text)
    if not new_time:
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞–∫ `–ß–ß:–ú–ú`.", parse_mode='Markdown', reply_markup=get_back_to_menu_keyboard(weather=True))
        bot.register_next_step_handler(msg, process_time_input)
        return
    user_settings[user_id]['notification_time'] = new_time
    save_data(user_settings, 'user_settings.json')
    bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *{new_time}*.", parse_mode='Markdown')
    if user_settings[user_id].get('notifications_on', False):
        schedule_weather_job(user_id)
        bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_weather_menu_keyboard())
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∏—Ö –≤–∫–ª—é—á–∏—Ç—å.", reply_markup=get_weather_menu_keyboard())


@bot.message_handler(func=lambda message: message.text.endswith("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))
def handle_toggle_notifications(message):
    user_id = str(message.from_user.id)
    ensure_user_data_exists(user_id)
    
    current_status = user_settings[user_id].get('notifications_on', False)
    new_status = not current_status
    user_settings[user_id]['notifications_on'] = new_status
    save_data(user_settings, 'user_settings.json')

    if new_status:
        schedule_weather_job(user_id)
        bot.send_message(message.chat.id, "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤–∫–ª—é—á–µ–Ω—ã.", reply_markup=get_weather_settings_keyboard(user_id))
    else:
        remove_weather_job(user_id)
        bot.send_message(message.chat.id, "‚ùå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤—ã–∫–ª—é—á–µ–Ω—ã.", reply_markup=get_weather_settings_keyboard(user_id))


# === 7. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ===

def send_reminder(user_id, reminder_data):
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_data['id']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    try:
        text = f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n_{reminder_data['text']}_"
        bot.send_message(user_id, text, parse_mode='Markdown', reply_markup=create_reminder_inline_keyboard(reminder_data['id']))
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_data['id']}: {e}")

def send_daily_weather_forecast(user_id):
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    user_id_str = str(user_id)
    city = user_settings.get(user_id_str, {}).get('city', '–ú–æ—Å–∫–≤–∞')
    forecast_text = get_and_format_24h_forecast(city)
    try:
        bot.send_message(user_id, forecast_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã {user_id_str}: {e}")
        
def schedule_weather_job(user_id):
    user_id_str = str(user_id)
    job_id = f"weather_{user_id_str}"
    settings = user_settings.get(user_id_str, {})
    time_str = settings.get('notification_time', '07:30')
    hour, minute = map(int, time_str.split(':'))
    
    scheduler.add_job(
        send_daily_weather_forecast,
        trigger='cron',
        hour=hour,
        minute=minute,
        timezone=moscow_tz, # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        args=[user_id],
        id=job_id,
        replace_existing=True
    )
    logger.info(f"–ó–∞–¥–∞—á–∞ '{job_id}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {time_str} (MSK).")

def remove_weather_job(user_id):
    job_id = f"weather_{user_id}"
    try:
        scheduler.remove_job(job_id)
        logger.info(f"–ó–∞–¥–∞—á–∞ '{job_id}' —É–¥–∞–ª–µ–Ω–∞.")
    except Exception:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É '{job_id}' (–≤–æ–∑–º–æ–∂–Ω–æ, –µ–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).")

def restore_jobs():
    logger.info("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminders.clear(); reminders.update(load_data('reminders.json', {}))
    rem_restored = 0
    for user_id, user_reminders in reminders.items():
        for rem in user_reminders:
            if datetime.fromisoformat(rem['time']) > datetime.now(utc):
                scheduler.add_job(send_reminder, trigger='date', run_date=rem['time'], args=[rem['user_id'], rem], id=rem['id'], replace_existing=True)
                rem_restored += 1
    logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {rem_restored} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ
    user_settings.clear(); user_settings.update(load_data('user_settings.json', {}))
    weather_restored = 0
    for user_id, settings in user_settings.items():
        if settings.get('notifications_on', False):
            schedule_weather_job(user_id)
            weather_restored += 1
    logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {weather_restored} –∑–∞–¥–∞—á –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ.")


# === 8. Webhook –∏ –∑–∞–ø—É—Å–∫ ===

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    if request.headers.get("content-type") == "application/json":
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return "ok", 200
    return "Invalid request", 400

@app.route("/", methods=["GET"])
def root(): return "Bot is running..."

def self_ping():
    while True:
        try:
            requests.head(WEBHOOK_URL, timeout=10)
            logger.info(f"[PING] Self-ping successful.")
        except Exception as e:
            logger.error(f"[PING ERROR] {e}")
        sleep(300)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    scheduler.start()
    restore_jobs()
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL + '/' + BOT_TOKEN)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    ping_thread = threading.Thread(target=self_ping); ping_thread.daemon = True; ping_thread.start()
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 10000)))

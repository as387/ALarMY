# === –û–ì–õ–ê–í–õ–ï–ù–ò–ï ===
# 1. –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —Å—Ç—Ä–æ–∫–∞ 13
# 2. –ë–ª–æ–∫ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ ‚Äî —Å—Ç—Ä–æ–∫–∞ 239
# 3. –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞ ‚Äî —Å—Ç—Ä–æ–∫–∞ ?
# 4. –ë–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚Äî —Å—Ç—Ä–æ–∫–∞ 342
# 5. –ë–ª–æ–∫ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ‚Äî —Å—Ç—Ä–æ–∫–∞ 191
# 6. –ë–ª–æ–∫ Webhook –∏ self-ping ‚Äî —Å—Ç—Ä–æ–∫–∞ 701
# 7. –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞ ‚Äî —Å—Ç—Ä–æ–∫–∞ 822

# 7. –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞

import requests
import time
from flask import Flask, request
from bs4 import BeautifulSoup
import telebot
# === 1. –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
import os
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
import logging
import uuid
import re
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

from telebot.types import ReplyKeyboardMarkup, KeyboardButton

from functools import lru_cache
import requests
from datetime import datetime

import json

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≥–æ–¥—ã
user_weather_settings = {}

def save_weather_settings():
    try:
        with open('weather_settings.json', 'w') as f:
            json.dump(user_weather_settings, f)
    except Exception as e:
        logger.error(f"Error saving weather settings: {e}")

def load_weather_settings():
    global user_weather_settings
    try:
        with open('weather_settings.json', 'r') as f:
            user_weather_settings = json.load(f)
    except FileNotFoundError:
        user_weather_settings = {}

def back_to_weather_settings_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã"))
    return keyboard

# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
@lru_cache(maxsize=10)
def get_cached_weather(api_key: str, city: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"""
    try:
        url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&lang=ru"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {str(e)}")
        return None

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class Weather:
    def __init__(self, period, temperature, feels_like, weather_desc, wind_speed, wind_dir, humidity, pressure):
        self.period = period
        self.temperature = temperature
        self.feels_like = feels_like
        self.weather_desc = weather_desc
        self.wind_speed = wind_speed
        self.wind_dir = wind_dir
        self.humidity = humidity
        self.pressure = pressure

        # –§–ª–∞–≥–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.period_flag = True
        self.temperature_flag = True
        self.feels_like_flag = True
        self.weather_desc_flag = True
        self.wind_speed_flag = False
        self.wind_dir_flag = False
        self.humidity_flag = False
        self.pressure_flag = False

    @staticmethod
    def from_openweather_data(time_str, data):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –ø–æ –≥—Ä–∞–¥—É—Å–∞–º
        wind_deg = data.get('wind_deg', 0)
        directions = ['–°', '–°–í', '–í', '–Æ–í', '–Æ', '–Æ–ó', '–ó', '–°–ó']
        wind_dir = directions[round(wind_deg / 45) % 8] if 'wind_deg' in data else ""
        
        return Weather(
            period=time_str,
            temperature=f"{round(data['temp'])}¬∞",
            feels_like=f"{round(data['feels_like'])}¬∞",
            weather_desc=data['description'],
            wind_speed=f"{data['wind_speed']} –º/—Å",
            wind_dir=wind_dir,
            humidity=f"{data['humidity']}%",
            pressure=f"{data['pressure']} –≥–ü–∞"
        )

def get_weather_settings_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
    keyboard.row("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã")
    return keyboard
    
def get_weather_forecast(api_key: str, city: str = "–ú–æ—Å–∫–≤–∞") -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –æ—à–∏–±–æ–∫"""
    try:
        url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&lang=ru"
        
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if not isinstance(data.get('list'), list):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
            
        return data
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def parse_yandex_forecast(raw_text):
    pattern = re.compile(
        r"(–£—Ç—Ä–æ–º|–î–Ω—ë–º|–í–µ—á–µ—Ä–æ–º|–ù–æ—á—å—é)\+(\d+)[¬∞¬∫]([–∞-—è–ê-–Ø\s]+?)\+(\d+)[¬∞¬∫](\d+)\s?–º/—Å([–ê-–Ø–∞-—è]+)(\d+)%(\d+)"
    )

    matches = pattern.findall(raw_text)
    forecast_data = []

    for part in matches:
        period, temp, desc, feels_like, wind_speed, wind_dir, humidity, pressure = part
        
        weather = Weather(
            period=period,
            temperature=f"{temp}¬∞",
            feels_like=f"{feels_like}¬∞",
            weather_desc=desc.strip(),
            wind_speed=f"{wind_speed} –º/—Å",
            wind_dir=wind_dir,
            humidity=f"{humidity}%",
            pressure=f"{pressure} –º–º —Ä—Ç. —Å—Ç."
        )

        # –ú–æ–∂–Ω–æ –≥–∏–±–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–ª–∞–≥–∞–º–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫":
        weather.set_flag('feels_like_flag', False)

        forecast_data.append(weather)

    return forecast_data

menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add(
    KeyboardButton("üÜï –î–æ–±–∞–≤–∏—Ç—å"),
    KeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä")
)
menu_keyboard.add(
    KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞")
)
menu_keyboard.add(
    KeyboardButton("üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
)

def get_weather_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è", "üîî –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –ø–æ–≥–æ–¥–µ")
    keyboard.row("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    keyboard.row("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    return keyboard

confirmation_pending = {}
id_counter = 1  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
job_counter = 1
temp_repeating = {}

BOT_TOKEN = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç)
confirmation_interval = 30

# –ö–æ–º–∞–Ω–¥–∞ /help - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ PDF
def send_help(message):
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        with open("instruction_extended.txt", "rb") as txt_file:
            bot.send_document(message.chat.id, txt_file)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /set_confirmation_interval - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@bot.message_handler(commands=['set_confirmation_interval'])
def set_confirmation_interval(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15, 30, 45):")
    bot.register_next_step_handler(message, process_interval_input)

def process_interval_input(message):
    global confirmation_interval
    try:
        new_interval = int(message.text.strip())
        if new_interval <= 0:
            raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        confirmation_interval = new_interval
        bot.send_message(message.chat.id, f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {confirmation_interval} –º–∏–Ω—É—Ç(—ã).")
    except ValueError as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, process_interval_input)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤.")
def toggle_repeat_mode(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    if not reminders[user_id]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=menu_keyboard)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.", reply_markup=back_to_menu_keyboard())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, process_repeat_selection)

def process_repeat_selection(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)

    user_id = message.from_user.id
    ensure_user_exists(user_id)

    try:
        parts = message.text.strip().split()
        indices = list(map(int, [x for x in parts if x.isdigit()]))
        sorted_reminders = sorted(reminders[user_id], key=lambda item: item["time"])

        for i in indices:
            if 0 < i <= len(sorted_reminders):
                rem = sorted_reminders[i - 1]
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º: –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –≤–∫–ª—é—á—ë–Ω ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º
                if rem.get("needs_confirmation"):
                    rem["needs_confirmation"] = False
                    rem.pop("repeat_interval", None)  # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
                else:
                    rem["needs_confirmation"] = True
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π confirmation_interval
                    rem["repeat_interval"] = confirmation_interval

        save_reminders()
        bot.send_message(
            message.chat.id,
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ! –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {confirmation_interval} –º–∏–Ω. (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)",
            reply_markup=menu_keyboard
        )
    except Exception as e:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=ReplyKeyboardMarkup())
        logger.error(f"[REPEAT_SELECTION ERROR] {e}")

scheduler = BackgroundScheduler()
scheduler.start()
reminders = {}

WEBHOOK_URL = 'https://din-js6l.onrender.com'  

bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

from pytz import timezone, utc

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

moscow = timezone('Europe/Moscow')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_reminders
@bot.message_handler(commands=['list_reminders'])
def list_reminders(message):
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminders = get_all_reminders()  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminder_text = "\n".join([f"{i+1}. {reminder}" for i, reminder in enumerate(reminders)])
    bot.send_message(message.chat.id, reminder_text)

def back_to_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return keyboard

def get_main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üÜï –î–æ–±–∞–≤–∏—Ç—å", "üîÅ –ü–æ–≤—Ç–æ—Ä")
    keyboard.row("üå§ –ü–æ–≥–æ–¥–∞")
    keyboard.row("üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    return keyboard

def load_reminders():
    global reminders
    try:
        with open("reminders.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            for user_id, user_reminders in data.items():
                reminders[int(user_id)] = user_reminders
    except FileNotFoundError:
        print("–§–∞–π–ª reminders.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")

def save_reminders():
    with open("reminders.json", "w", encoding="utf-8") as f:
        json.dump(reminders, f, ensure_ascii=False, indent=2, default=str)

def restore_jobs():
    for user_id, user_reminders in reminders.items():
        for rem in user_reminders:
            if rem["is_repeating"]:
                scheduler.add_job(
                    send_reminder,
                    trigger='interval',
                    days=1 if "–¥–µ–Ω—å" in rem["text"] else 7,
                    start_date=rem["time"],
                    args=[int(user_id), rem["text"].split(" (–ø–æ–≤—Ç.")[0], rem["time"].split("T")[1][:5], rem["job_id"]],
                    id=rem["job_id"]
                )
            else:
                rem_time = datetime.fromisoformat(rem["time"])
                if rem_time > datetime.utcnow():
                    scheduler.add_job(
                        send_reminder,
                        trigger='date',
                        run_date=rem_time,
                        args=[int(user_id), rem["text"], rem_time.strftime("%H:%M"), rem["job_id"]],
                        id=rem["job_id"]
                    )

def get_hourly_forecast(city: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Å—ã (08:00, 13:00, 17:00, 20:00)
    :param city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :return: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ {–≤—Ä–µ–º—è: –¥–∞–Ω–Ω—ã–µ}
    """
    api_key = '71d3d00aad6c943eb72ea5938056106d'  # –í–∞—à API-–∫–ª—é—á
    base_url = 'https://api.openweathermap.org/data/2.5/forecast'
    
    params = {
        'q': city,
        'units': 'metric',
        'lang': 'ru',
        'appid': api_key,
        'cnt': 24  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö —á–∞—Å–æ–≤
    }

    try:
        response = requests.get(base_url, params=params, timeout=10)
        response.raise_for_status()
        forecast_data = response.json()
        
        target_times = {'08:00', '13:00', '17:00', '20:00'}
        hourly_forecast = {}
        today = datetime.now().date()
        
        for item in forecast_data['list']:
            forecast_time = datetime.fromtimestamp(item['dt'])
            time_str = forecast_time.strftime('%H:%M')
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –¥–ª—è –Ω—É–∂–Ω—ã—Ö —á–∞—Å–æ–≤
            if forecast_time.date() == today and time_str in target_times:
                hourly_forecast[time_str] = {
                    'time': time_str,
                    'temp': round(item['main']['temp']),
                    'feels_like': round(item['main']['feels_like']),
                    'description': item['weather'][0]['description'].capitalize(),
                    'wind_speed': item['wind']['speed'],
                    'humidity': item['main']['humidity'],
                    'pressure': item['main']['pressure'],
                    'icon': item['weather'][0]['icon']
                }
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —á–∞—Å—ã, –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        if len(hourly_forecast) < 4:
            remaining_times = target_times - set(hourly_forecast.keys())
            if remaining_times:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
                for item in forecast_data['list']:
                    forecast_time = datetime.fromtimestamp(item['dt'])
                    if forecast_time.date() == today:
                        time_str = forecast_time.strftime('%H:%M')
                        if time_str not in hourly_forecast:
                            closest_time = min(remaining_times,
                                             key=lambda x: abs(datetime.strptime(x, '%H:%M').hour - forecast_time.hour))
                            if closest_time not in hourly_forecast:
                                hourly_forecast[closest_time] = {
                                    'time': closest_time,
                                    'temp': round(item['main']['temp']),
                                    'feels_like': round(item['main']['feels_like']),
                                    'description': item['weather'][0]['description'].capitalize(),
                                    'wind_speed': item['wind']['speed'],
                                    'humidity': item['main']['humidity'],
                                    'pressure': item['main']['pressure'],
                                    'icon': item['weather'][0]['icon']
                                }
                                remaining_times.remove(closest_time)
                                if not remaining_times:
                                    break
        
        return hourly_forecast
    
    except requests.RequestException as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}')
        return {}
    except (KeyError, ValueError) as e:
        print(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}')
        return {}


DEFAULT_NOTIFICATION_TIME = "7.30"  # –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
user_weather_notifications = {}  # –•—Ä–∞–Ω–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {"user_id": {"enabled": True/False, "time": "7.30"}}

# === 5. –ë–ª–æ–∫ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ===
def ensure_user_exists(user_id):
    if user_id not in reminders:
        reminders[user_id] = []


from telebot.types import BotCommand, BotCommandScopeChatMember

ADMIN_ID = 941791842  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

def send_help(message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –º–µ–Ω—é –±–æ—Ç–∞

    bot.send_message(message.chat.id, "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:")

@bot.message_handler(commands=['restart'])
def restart_command(message):
    user_id = message.from_user.id

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å
    confirmation_pending.pop(user_id, None)

    bot.send_message(
        message.chat.id,
        "üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=menu_keyboard
    )

from datetime import datetime

def save_user_info(user):
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except FileNotFoundError:
        users = {}

    user_id = str(user.id)
    if user_id not in users:
        users[user_id] = {
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "joined_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        with open("users.json", "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

def load_weather_notifications():
    global user_weather_notifications
    try:
        with open('weather_notifications.json', 'r') as f:
            user_weather_notifications = json.load(f)
    except FileNotFoundError:
        user_weather_notifications = {}

def save_weather_notifications():
    with open('weather_notifications.json', 'w') as f:
        json.dump(user_weather_notifications, f)

def parse_time_input(time_str):
    """–ü–∞—Ä—Å–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú (MSK) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã"""
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        time_str = time_str.replace(',', '.')
        hours, minutes = map(int, time_str.split('.'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        if 0 <= hours <= 23 and 0 <= minutes <= 59:
            return hours, minutes
        else:
            return None
    except:
        return None

def schedule_daily_weather(user_id, time_str=DEFAULT_NOTIFICATION_TIME):
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for job in scheduler.get_jobs():
            if job.id == f"weather_{user_id}":
                job.remove()
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        hours, minutes = parse_time_input(time_str)
        if hours is None or minutes is None:
            raise ValueError("Invalid time format")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        scheduler.add_job(
            send_daily_weather,
            trigger='cron',
            hour=hours,
            minute=minutes,
            args=[user_id],
            id=f"weather_{user_id}",
            timezone=moscow
        )
    except Exception as e:
        logger.error(f"Error scheduling weather for user {user_id}: {e}")

def send_daily_weather(user_id):
    try:
        API_KEY = "71d3d00aad6c943eb72ea5938056106d"
        city = user_weather_settings.get(str(user_id), {}).get('city', '–ú–æ—Å–∫–≤–∞')
        
        weather_data = get_cached_weather(API_KEY, city)
        
        if not weather_data:
            logger.error(f"Weather data not available for user {user_id}")
            return
        
        current = weather_data['list'][0]
        current_time = datetime.fromtimestamp(current['dt']).strftime('%H:%M')
        
        response = [
            f"üå§ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city}</b>",
            f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}</i>",
            "",
            f"<b>–°–µ–π—á–∞—Å:</b> {current['weather'][0]['description'].capitalize()}",
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(current['main']['temp'])}¬∞C",
            f"üí® –í–µ—Ç–µ—Ä: {current['wind']['speed']} –º/—Å",
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['main']['humidity']}%",
            "",
            "<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>"
        ]

        for forecast in weather_data['list'][1:8]:
            time = datetime.fromtimestamp(forecast['dt']).strftime('%H:%M')
            temp = round(forecast['main']['temp'])
            desc = forecast['weather'][0]['description']
            response.append(f"üïí {time}: {temp}¬∞C, {desc}")

        bot.send_message(
            user_id,
            "\n".join(response),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error sending daily weather to {user_id}: {e}")

# === 2. –ë–ª–æ–∫ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ ===
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    bot.clear_step_handler_by_chat_id(message.chat.id)
    if message.text.startswith('/start'):
        ensure_user_exists(message.from_user.id)
        save_user_info(message.from_user)
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)
    elif message.text.startswith('/help'):
        try:
            with open("instruction_extended.txt", "rb") as txt_file:
                bot.send_document(message.chat.id, txt_file, reply_markup=menu_keyboard)
        except FileNotFoundError:
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=menu_keyboard)
def start_command(message):
    user_id = message.from_user.id

    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω
    ensure_user_exists(user_id)
    save_user_info(message.from_user)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ "–æ–∂–∏–¥–∞—é—â–∏–µ —à–∞–≥–∏"
    bot.clear_step_handler_by_chat_id(message.chat.id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu_keyboard
    )

@bot.message_handler(regexp=r"^/done_[\w\-]+$")
def handle_done_command(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    job_id = message.text.replace("/done_", "").strip()

    for rem in reminders.get(user_id, []):
        if str(rem["id"]) == job_id:
            try:
                scheduler.remove_job(rem["job_id"])
            except:
                pass
            reminders[user_id].remove(rem)
            save_reminders()
            bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´{rem['text']}¬ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=menu_keyboard)
            return

    bot.send_message(message.chat.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.", reply_markup=menu_keyboard)


@bot.message_handler(regexp=r"^/skip_[\w\-]+$")
def handle_skip_command(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    job_id = message.text.replace("/skip_", "").strip()

    for rem in reminders.get(user_id, []):
        if str(rem["id"]) == job_id:
            interval = rem.get("repeat_interval", confirmation_interval)
            new_job_id = str(uuid.uuid4())  # —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ID –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

            rem["time"] = datetime.utcnow() + timedelta(minutes=interval)
            rem["job_id"] = new_job_id

            scheduler.add_job(
                send_reminder,
                trigger='date',
                run_date=rem["time"],
                args=[user_id, rem["text"], rem["time"].strftime("%H:%M"), new_job_id],
                id=new_job_id
            )
            save_reminders()
            bot.send_message(message.chat.id, f"üîÅ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {interval} –º–∏–Ω—É—Ç: {rem['text']}", reply_markup=menu_keyboard)
            return

    bot.send_message(message.chat.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", reply_markup=menu_keyboard)

@bot.message_handler(func=lambda message: message.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å")
def handle_add(message):
    add_reminder(message)  # –í—ã–∑—ã–≤–∞–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ")  # –∏–ª–∏ logger.info(...)

@bot.message_handler(func=lambda message: message.text == "üîÅ –ü–æ–≤—Ç–æ—Ä")
def handle_repeat_button(message):
    bot.send_message(message.chat.id, "üîß –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!", reply_markup=menu_keyboard)
    return
    # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

@bot.message_handler(func=lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å")
def handle_delete(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    if not reminders[user_id]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=menu_keyboard)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):", reply_markup=back_to_menu_keyboard())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, process_remove_input)


@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤.")
def handle_confirm(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    if not reminders[user_id]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=menu_keyboard)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):", reply_markup=back_to_menu_keyboard())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, process_repeat_selection)

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def back_to_main_menu(message):
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )

ADMIN_ID = 941791842  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

@bot.message_handler(commands=['devmode'])
def show_users(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "üìÇ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if not users:
        bot.send_message(message.chat.id, "üò∂ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    response = ""
    for uid, data in users.items():
        uname = f"@{data['username']}" if data.get('username') else data.get("first_name", "‚ùì")
        joined = data.get("joined_at", "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        response += f"{uname}, [{joined}]\n"

    bot.send_message(message.chat.id, response, reply_markup=menu_keyboard)

@bot.message_handler(commands=['ping'])
def test_ping(message):
    bot.send_message(message.chat.id, "–ü–∏–Ω–≥ –æ–∫!", reply_markup=menu_keyboard)

@bot.message_handler(commands=['dump'])
def dump_reminders(message):
    try:
        with open("reminders.json", "r", encoding="utf-8") as f:
            data = f.read()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–∏–¥–µ –∫–æ–¥–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç
        bot.send_message(message.chat.id, f"```json\n{data}\n```", parse_mode="Markdown")
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–§–∞–π–ª reminders.json –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=menu_keyboard)

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
# === 4. –ë–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ===
def add_reminder(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú *—Å–æ–±—ã—Ç–∏–µ* –∏–ª–∏ –î–î.–ú–ú –ß–ß.–ú–ú *—Å–æ–±—ã—Ç–∏–µ*.", 	reply_markup=back_to_menu_keyboard())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, process_reminder)

def process_reminder(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)
    
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    now = datetime.now(moscow)

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
        full_match = re.match(r'^(\d{1,2})\.(\d{1,2}) (\d{1,2})\.(\d{2}) (.+)', message.text)
        if full_match:
            day, month, hour, minute, event = full_match.groups()
            reminder_datetime_moscow = moscow.localize(datetime(
                year=now.year, month=int(month), day=int(day),
                hour=int(hour), minute=int(minute)
            ))
        else:
            time_match = re.match(r'^(\d{1,2})\.(\d{2}) (.+)', message.text)
            if not time_match:
                raise ValueError
            hour, minute, event = time_match.groups()
            reminder_datetime_moscow = moscow.localize(datetime.combine(
                now.date(), datetime.strptime(f"{hour}.{minute}", "%H.%M").time()
            ))
            if reminder_datetime_moscow < now:
                reminder_datetime_moscow += timedelta(days=1)
        reminder_datetime = reminder_datetime_moscow.astimezone(utc)
        global job_counter
        global id_counter
        
        reminder_id = str(id_counter)
        id_counter += 1
        
        job_id = str(uuid.uuid4())  # —ç—Ç–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å

        
        reminders[user_id].append({
            "id": reminder_id,                # —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID
            "job_id": job_id,                 # –ø–ª–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π ID
            "time": reminder_datetime,       # –∏–ª–∏ first_run_utc
            "text": event,                   # –∏–ª–∏ event + " (–ø–æ–≤—Ç. ...)"
            "is_repeating": False,           # –∏–ª–∏ True
            "needs_confirmation": False      # –∏–ª–∏ True
        })
        save_reminders()


        scheduler.add_job(
            send_reminder,
            trigger='date',
            run_date=reminder_datetime,
            args=[user_id, event, reminder_datetime.strftime("%H:%M"), job_id],
            id=job_id
        )

        # üî• –í–æ—Ç –∑–¥–µ—Å—å –í–û–ó–í–†–ê–¢ –ö –ì–õ–ê–í–ù–û–ú–£ –ú–ï–ù–Æ
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {reminder_datetime_moscow.strftime('%d.%m %H:%M')} (MSK) ‚Äî {event}",
            reply_markup=menu_keyboard
        )

    except Exception:
        bot.send_message(
            message.chat.id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_menu_keyboard()
        )
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, process_reminder)
        
@bot.message_handler(func=lambda message: message.text == "üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
def show_reminders(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    if not reminders[user_id]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=menu_keyboard)
        return

    sorted_reminders = sorted(reminders[user_id], key=lambda item: item["time"])
    text = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"

    for i, rem in enumerate(sorted_reminders, start=1):
        msk_time = rem["time"].astimezone(moscow)
        line = f"{i}. {msk_time.strftime('%d.%m %H:%M')} ‚Äî {rem['text']}"

        if rem.get("is_repeating"):
            match = re.search(r"\(–ø–æ–≤—Ç\. (.+?)\)", rem.get("text", ""))
            if match:
                interval_text = match.group(1)
                line += f" üîÅ ({interval_text})"

        if rem.get("needs_confirmation"):
            interval = rem.get("repeat_interval", confirmation_interval)
            line += f", üö® ({interval})"

        text += line + "\n"

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤."), types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å"))
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))

    bot.send_message(message.chat.id, text, reply_markup=keyboard)

ADMIN_ID = 941791842  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

@bot.message_handler(commands=['devmode'])
def show_users(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "üìÇ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if not users:
        bot.send_message(message.chat.id, "üò∂ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    response = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for uid, data in users.items():
        name = data.get("first_name", "")
        uname = f"@{data['username']}" if data.get('username') else "(–±–µ–∑ username)"
        joined = data.get("joined_at", "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        response += f"\nüÜî {uid} ‚Äî {name} {uname}\nüïí –ó–∞—à—ë–ª: {joined}\n"

    bot.send_message(message.chat.id, response, reply_markup=menu_keyboard)


def process_reminder(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)
    
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    moscow = timezone('Europe/Moscow')
    now = datetime.now(moscow)

    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω —Å –¥–∞—Ç–æ–π
        full_match = re.match(r'^(\d{1,2})\.(\d{1,2}) (\d{1,2})\.(\d{2}) (.+)', message.text)
        if full_match:
            day, month, hour, minute, event = full_match.groups()
            reminder_datetime_moscow = moscow.localize(datetime(
                year=now.year, month=int(month), day=int(day),
                hour=int(hour), minute=int(minute)
            ))
        else:
            # –ü–∞—Ç—Ç–µ—Ä–Ω —Ç–æ–ª—å–∫–æ —Å –≤—Ä–µ–º–µ–Ω–µ–º
            time_match = re.match(r'^(\d{1,2})\.(\d{2}) (.+)', message.text)
            if not time_match:
                raise ValueError
            hour, minute, event = time_match.groups()
            reminder_datetime_moscow = moscow.localize(datetime.combine(now.date(), datetime.strptime(f"{hour}.{minute}", "%H.%M").time()))
            if reminder_datetime_moscow < now:
                reminder_datetime_moscow += timedelta(days=1)

        reminder_datetime = reminder_datetime_moscow.astimezone(utc)
        
        job_id = str(uuid.uuid4())  # —ç—Ç–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å

        global id_counter
        reminder_id = str(id_counter)
        id_counter += 1
        
        reminders[user_id].append({
            "id": reminder_id,
            "job_id": job_id,
            "time": reminder_datetime,
            "text": event,
            "is_repeating": False,
            "needs_confirmation": False
        })


        scheduler.add_job(
            send_reminder,
            trigger='date',
            run_date=reminder_datetime,
            args=[user_id, event, reminder_datetime.strftime("%H:%M"), job_id],
            id=job_id
        )

        bot.send_message(message.chat.id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {reminder_datetime_moscow.strftime('%d.%m %H:%M')} (MSK) ‚Äî {event}", reply_markup=menu_keyboard)

    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_menu_keyboard())
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, process_reminder)

@bot.message_handler(func=lambda message: message.text == "–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def add_repeating_reminder(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú *—Å–æ–±—ã—Ç–∏–µ*.", reply_markup=back_to_menu_keyboard())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, ask_repeat_interval)

@bot.message_handler(func=lambda message: message.text == "üå§ –ü–æ–≥–æ–¥–∞")
def handle_weather_menu(message):
    try:
        logger.info(f"Weather menu requested by {message.from_user.id}")
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–≥–æ–¥–æ–π:",
            reply_markup=get_weather_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in weather menu: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=get_main_menu_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è")
def handle_today_weather(message):
    API_KEY = "71d3d00aad6c943eb72ea5938056106d"  # –í–∞—à API-–∫–ª—é—á
    
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        weather_data = get_cached_weather(API_KEY, "–ú–æ—Å–∫–≤–∞")
        
        if not weather_data:
            raise Exception("–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
        current = weather_data['list'][0]
        current_time = datetime.fromtimestamp(current['dt']).strftime('%H:%M')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = [
            f"üå§ <b>–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ</b>",
            f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}</i>",
            "",
            f"<b>–°–µ–π—á–∞—Å:</b> {current['weather'][0]['description'].capitalize()}",
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(current['main']['temp'])}¬∞C",
            f"üí® –í–µ—Ç–µ—Ä: {current['wind']['speed']} –º/—Å",
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['main']['humidity']}%",
            "",
            "<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —á–∞—Å–∞–º
        for forecast in weather_data['list'][1:8]:  # –°–ª–µ–¥—É—é—â–∏–µ 21 —á–∞—Å (3 —á–∞—Å–∞ * 7)
            time = datetime.fromtimestamp(forecast['dt']).strftime('%H:%M')
            temp = round(forecast['main']['temp'])
            desc = forecast['weather'][0]['description']
            response.append(f"üïí {time}: {temp}¬∞C, {desc}")

        bot.send_message(
            message.chat.id,
            "\n".join(response),
            parse_mode='HTML',
            reply_markup=get_weather_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"[WEATHER ERROR] {str(e)}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            reply_markup=get_weather_menu_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É")
def handle_refresh_weather(message):
    handle_today_weather(message)  # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
def back_to_weather_menu(message):
    bot.send_message(
        message.chat.id,
        "–ú–µ–Ω—é –ø–æ–≥–æ–¥—ã:",
        reply_markup=get_weather_menu_keyboard()
    )
@bot.message_handler(func=lambda message: message.text == "üîî –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –ø–æ–≥–æ–¥–µ")
def handle_weather_notifications(message):
    user_id = str(message.from_user.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_weather_notifications:
        user_weather_notifications[user_id] = {
            "enabled": False,
            "time": DEFAULT_NOTIFICATION_TIME
        }
    
    status = user_weather_notifications[user_id].get('enabled', False)
    time = user_weather_notifications[user_id].get('time', DEFAULT_NOTIFICATION_TIME)
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("/change_weather_status"))
    keyboard.add(types.KeyboardButton("/change_weather_time"))
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã"))
    
    bot.send_message(
        message.chat.id,
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if status else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {time} (MSK)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/change_weather_status - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "/change_weather_time - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        reply_markup=keyboard
    )

@bot.message_handler(commands=['change_weather_status'])
def change_weather_status(message):
    user_id = str(message.from_user.id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Å–æ–∑–¥–∞—ë–º –∏—Ö
    if user_id not in user_weather_notifications:
        user_weather_notifications[user_id] = {
            "enabled": False,
            "time": DEFAULT_NOTIFICATION_TIME  # "7.30" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
    new_status = not user_weather_notifications[user_id]['enabled']
    user_weather_notifications[user_id]['enabled'] = new_status
    
    # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    if new_status:
        time_str = user_weather_notifications[user_id]['time']
        schedule_daily_weather(int(user_id), time_str)
        response = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ **–≤–∫–ª—é—á–µ–Ω—ã**"
    else:
        # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã ‚Äî —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        job_id = f"weather_{user_id}"
        for job in scheduler.get_jobs():
            if job.id == job_id:
                job.remove()
        response = "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ **–≤—ã–∫–ª—é—á–µ–Ω—ã**"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    save_weather_notifications()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(
        message.chat.id,
        response,
        reply_markup=get_weather_menu_keyboard()
    )
@bot.message_handler(commands=['change_weather_time'])
def change_weather_time(message):
    user_id = str(message.from_user.id)
    
    if user_id not in user_weather_notifications:
        user_weather_notifications[user_id] = {
            "enabled": False,
            "time": DEFAULT_NOTIFICATION_TIME
        }
    
    bot.send_message(
        message.chat.id,
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_weather_notifications[user_id]['time']} (MSK)\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.00 –∏–ª–∏ 7.30):",
        reply_markup=back_to_weather_settings_keyboard()
    )
    bot.register_next_step_handler(message, process_weather_time_input)
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
    new_status = not user_weather_notifications[user_id].get('enabled', False)
    user_weather_notifications[user_id]['enabled'] = new_status
    
    if new_status:
        time_str = user_weather_notifications[user_id].get('time', DEFAULT_NOTIFICATION_TIME)
        schedule_daily_weather(int(user_id), time_str)
        response = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤–∫–ª—é—á–µ–Ω—ã"
    else:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        for job in scheduler.get_jobs():
            if job.id == f"weather_{user_id}":
                job.remove()
        response = "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤—ã–∫–ª—é—á–µ–Ω—ã"
    
    save_weather_notifications()
    bot.send_message(message.chat.id, response, reply_markup=get_weather_menu_keyboard())


def process_weather_time_input(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã":
        return back_to_weather_menu(message)
    
    user_id = str(message.from_user.id)
    time_input = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /)
    if time_input.startswith('/'):
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.30 –∏–ª–∏ 8.00)",
            reply_markup=back_to_weather_settings_keyboard()
        )
        bot.register_next_step_handler(message, process_weather_time_input)
        return
    
    parsed_time = parse_time_input(time_input)
    
    if parsed_time:
        hours, minutes = parsed_time
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É (7.30 –≤–º–µ—Å—Ç–æ 7.3)
        time_str = f"{hours}.{minutes:02d}"
        user_weather_notifications[user_id]['time'] = time_str
        
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º
        if user_weather_notifications[user_id].get('enabled', False):
            schedule_daily_weather(int(user_id), time_str)
        
        save_weather_notifications()
        bot.send_message(
            message.chat.id,
            f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time_str} (MSK)",
            reply_markup=get_weather_menu_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.30 –∏–ª–∏ 8.00)",
            reply_markup=back_to_weather_settings_keyboard()
        )
        bot.register_next_step_handler(message, process_weather_time_input)

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã")
def handle_weather_settings(message):
    bot.send_message(
        message.chat.id,
        "–ü–æ–∫–∞ —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ú–æ—Å–∫–≤–∞ üòîüòîüòî",
        reply_markup=get_weather_menu_keyboard()
    )
    
@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã")
def back_to_weather_menu(message):
    bot.send_message(
        message.chat.id,
        "–ú–µ–Ω—é –ø–æ–≥–æ–¥—ã:",
        reply_markup=get_weather_menu_keyboard()
    )
    
    try:
        response = requests.get(test_url)
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in user_weather_settings:
                user_weather_settings[user_id] = {}
            user_weather_settings[user_id]['city'] = city
            
            # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_weather_settings()
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {city}",
                reply_markup=get_weather_settings_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=back_to_weather_settings_keyboard()
            )
            bot.register_next_step_handler(message, process_city_input)
    except Exception as e:
        logger.error(f"Error checking city: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_weather_settings_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
def handle_change_city(message):
    print ("–ü–æ–∫–∞ —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ú–æ—Å–∫–≤–∞ üòîüòîüòî")
        
def ask_repeat_interval(message):

    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)
    
    user_id = message.from_user.id
    try:
        time_match = re.match(r'^(\d{1,2})\.(\d{2}) (.+)', message.text)
        if not time_match:
            raise ValueError

        hour, minute, event = time_match.groups()
        
        temp_repeating[user_id] = {
            "time_str": f"{hour}.{minute}",
            "event": event
        }

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"), types.KeyboardButton("–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"))
        bot.send_message(message.chat.id, "–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å?", reply_markup=keyboard)
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, process_repeating_interval)

    except:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, add_repeating_reminder)


def process_repeating_interval(message):

    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)
    
    user_id = message.from_user.id
    data = temp_repeating.get(user_id)
    
    if not data:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    time_str = data["time_str"]
    event = data["event"]
    del temp_repeating[user_id]  # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    interval_input = message.text.strip().lower()

    interval = None
    if interval_input == "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å":
        interval = "–¥–µ–Ω—å"
    elif interval_input == "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é":
        interval = "–Ω–µ–¥–µ–ª—è"
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, process_repeating_interval)
        return

    try:
        moscow = timezone('Europe/Moscow')
        now = datetime.now(moscow)
        time_obj = datetime.strptime(time_str, "%H.%M").time()
        first_run = moscow.localize(datetime.combine(now.date(), time_obj))

        if first_run < now:
            first_run += timedelta(days=1)

        first_run_utc = first_run.astimezone(utc)
        global job_counter
        global id_counter
        reminder_id = str(id_counter)
        id_counter += 1
        
        job_id = str(uuid.uuid4())  # —ç—Ç–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å

        

        if interval == '–¥–µ–Ω—å':
            scheduler.add_job(send_reminder, 'interval', days=1, start_date=first_run_utc,
                              args=[user_id, event, time_str, job_id], id=job_id)
        elif interval == '–Ω–µ–¥–µ–ª—è':
            scheduler.add_job(send_reminder, 'interval', weeks=1, start_date=first_run_utc,
                              args=[user_id, event, time_str, job_id], id=job_id)

        
        reminder_id = str(id_counter)
        id_counter += 1
        
        reminders[user_id].append({
            "id": reminder_id,
            "job_id": job_id,
            "time": reminder_datetime,
            "text": event,
            "is_repeating": False,
            "needs_confirmation": False
        })

        if interval == "–¥–µ–Ω—å":
            form = "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
        else:
            form = "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {first_run.strftime('%d.%m %H:%M')} (MSK) ‚Äî {event} {form}",
            reply_markup=menu_keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–º—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏: {e}")
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=ReplyKeyboardMarkup())

def process_remove_input(message):

    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)
    
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    try:
        reminder_indices = list(map(int, re.findall(r'\d+', message.text)))
        sorted_reminders = sorted(reminders[user_id], key=lambda item: item["time"])
        reminders_to_remove = [sorted_reminders[i - 1] for i in reminder_indices if 0 < i <= len(sorted_reminders)]
        for rem in reminders_to_remove:
            for job in scheduler.get_jobs():
                if job.id == rem["job_id"]:
                    job.remove()
            reminders[user_id].remove(rem)
        
        save_reminders()
        bot.send_message(message.chat.id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.", reply_markup=menu_keyboard)

    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=ReplyKeyboardMarkup())

def send_reminder(user_id, event, time, job_id):
    logger.info(f"[REMINDER] STARTED for user {user_id} | Event: {event} | Time: {time} | Job ID: {job_id}")

    try:
        reminder_time_utc = datetime.utcnow()
        reminder_time_msk = utc.localize(reminder_time_utc).astimezone(moscow).strftime('%H:%M')

        keyboard = None
        text_suffix = ""

        for rem in reminders.get(user_id, []):
            if rem["job_id"] == job_id and rem.get("needs_confirmation"):
                confirmation_pending[user_id] = {
                    "job_id": job_id,
                    "text": event
                }
                
                text_suffix = (
                    f"\n\n–ù–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏:\n"
                    f"/done_{rem['id']}\n"
                    f"–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:\n"
                    f"/skip_{rem['id']}"
                )

                break

        msg = bot.send_message(
            user_id,
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event} (–≤ {reminder_time_msk} –ø–æ –ú–°–ö){text_suffix}\n\n[#ID:{rem['id']}]",
            reply_markup=menu_keyboard
        )

        logger.info(f"[REMINDER] Sent to user {user_id}")

    except Exception as e:
        logger.error(f"[REMINDER ERROR] {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞
    for rem in reminders.get(user_id, []):
        if str(rem["job_id"]) == job_id:
            if rem.get("is_repeating"):
                return
            if rem.get("needs_confirmation"):
                interval = rem.get("repeat_interval", confirmation_interval)
                global job_counter
                
                job_id = str(uuid.uuid4())  # —ç—Ç–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å


                scheduler.add_job(
                    send_reminder,
                    trigger='date',
                    run_date=datetime.utcnow() + timedelta(minutes=interval),
                    args=[user_id, event, time, new_job_id],
                    id=new_job_id
                )
                rem["job_id"] = new_job_id
                save_reminders()
            else:
                reminders[user_id] = [r for r in reminders[user_id] if r["job_id"] != job_id]
                save_reminders()

# === 6. –ë–ª–æ–∫ Webhook –∏ self-ping ===
@app.route("/", methods=["POST"])
def telegram_webhook():
    if request.headers.get("content-type") == "application/json":
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return "ok", 200
    return "Invalid request", 400

@app.route("/", methods=["GET"])
def root():
    return "It works!", 200

import threading
import requests
from time import sleep

def self_ping():
    while True:
        try:
            response = requests.head(WEBHOOK_URL)
            print(f"[PING] Status: {response.status_code}")
        except Exception as e:
            print(f"[PING ERROR] {e}")
        sleep(60)

@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤.")
def toggle_repeat_mode(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    if not reminders[user_id]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=menu_keyboard)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.", reply_markup=back_to_menu_keyboard())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, process_repeat_selection)

def process_repeat_selection(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)

    user_id = message.from_user.id
    ensure_user_exists(user_id)

    try:
        parts = message.text.strip().split()
        indices = list(map(int, [x for x in parts if x.isdigit()]))
        sorted_reminders = sorted(reminders[user_id], key=lambda item: item["time"])

        for i in indices:
            if 0 < i <= len(sorted_reminders):
                rem = sorted_reminders[i - 1]
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º: –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –≤–∫–ª—é—á—ë–Ω ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º
                if rem.get("needs_confirmation"):
                    rem["needs_confirmation"] = False
                    rem.pop("repeat_interval", None)  # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
                else:
                    rem["needs_confirmation"] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

        save_reminders()
        bot.send_message(
            message.chat.id,
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ! –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {confirmation_interval} –º–∏–Ω. (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)",
            reply_markup=menu_keyboard
        )
    except Exception as e:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=ReplyKeyboardMarkup())
        logger.error(f"[REPEAT_SELECTION ERROR] {e}")

@bot.message_handler(commands=['done'])
def confirm_done(message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: /done <job_id>")
        return

    job_id = parts[1]
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    for rem in reminders[user_id]:
        if str(rem["job_id"]) == job_id:
            rem["needs_confirmation"] = False
            rem.pop("repeat_interval", None)
            try:
                scheduler.remove_job(job_id)
            except:
                pass
            save_reminders()
            bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´{rem['text']}¬ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.")
            return

    bot.send_message(message.chat.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")

@bot.message_handler(commands=['interval'])
def show_confirmation_interval(message):
    bot.send_message(
        message.chat.id,
        f"‚è± –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirmation_interval} –º–∏–Ω—É—Ç",
        reply_markup=menu_keyboard
    )

@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
def handle_confirm(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    if not message.reply_to_message or "#ID:" not in message.reply_to_message.text:
        bot.send_message(message.chat.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.", reply_markup=menu_keyboard)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º job_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    match = re.search(r"\[#ID:(.+?)\]", message.reply_to_message.text)
    if not match:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=menu_keyboard)
        return

    job_id = match.group(1)

    # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    for rem in reminders[user_id]:
        if str(rem["job_id"]) == job_id:
            try:
                scheduler.remove_job(job_id)
            except:
                pass
            reminders[user_id].remove(rem)
            save_reminders()
            bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´{rem['text']}¬ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=menu_keyboard)
            return

    bot.send_message(message.chat.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.", reply_markup=menu_keyboard)

@bot.message_handler(func=lambda message: message.text == "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
def handle_skip(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    job_id = confirmation_pending.get(user_id)

    if not job_id:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=menu_keyboard)
        return

    for rem in reminders[user_id]:
        if str(rem["job_id"]) == job_id:
            interval = rem.get("repeat_interval", confirmation_interval)
            global id_counter
            reminder_id = str(id_counter)
            id_counter += 1
            
            new_job_id = str(uuid.uuid4())  # —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ID –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            
            rem["job_id"] = new_job_id        # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π ID
            rem["id"] = reminder_id           # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ID –¥–ª—è –∫–æ–º–∞–Ω–¥



            rem["time"] = datetime.utcnow() + timedelta(minutes=interval)
            rem["job_id"] = new_job_id
            scheduler.add_job(
                send_reminder,
                trigger='date',
                run_date=rem["time"],
                args=[user_id, rem["text"], rem["time"].strftime("%H:%M"), new_job_id],
                id=new_job_id
            )
            save_reminders()
            bot.send_message(message.chat.id, f"üîÅ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {interval} –º–∏–Ω—É—Ç: {rem['text']}")
            break

    confirmation_pending.pop(user_id, None)
    
# === 7. –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞ ===
if __name__ == "__main__":
    load_reminders()
    load_weather_settings()
    load_weather_notifications()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for user_id, settings in user_weather_notifications.items():
        if settings.get('enabled', False):
            schedule_daily_weather(int(user_id), settings.get('time', DEFAULT_NOTIFICATION_TIME))
    
    restore_jobs()

    bot.set_my_commands([
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("help", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"),
        BotCommand("set_confirmation_interval", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"),
        BotCommand("list_reminders", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
        BotCommand("interval", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"),
        BotCommand("restart", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("devmode", "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"),
        # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:
        # BotCommand("add_reminder", "–î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        # BotCommand("set_repeating_reminder", "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        # BotCommand("manage_reminder", "–£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"),
        # BotCommand("delete_reminder", "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        # BotCommand("ping", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞")
    ])

    ping_thread = threading.Thread(target=self_ping)
    ping_thread.daemon = True
    ping_thread.start()
    app.run(host="0.0.0.0", port=10000)

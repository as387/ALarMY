from flask import Flask, request
import telebot
import os
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
import logging
import uuid
import re
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

from telebot.types import ReplyKeyboardMarkup, KeyboardButton

selected_weekdays = {}
DAYS_RU = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]


def create_weekday_keyboard(user_id):
    selected = selected_weekdays.get(user_id, [])
    keyboard = types.InlineKeyboardMarkup(row_width=4)
    buttons = []

    for i, day in enumerate(DAYS_RU):
        prefix = "‚úÖ " if i in selected else ""
        buttons.append(types.InlineKeyboardButton(f"{prefix}{day}", callback_data=f"weekday_{i}"))

    keyboard.add(*buttons)
    if selected:
        keyboard.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="weekdays_done"))
    else:
        keyboard.add(types.InlineKeyboardButton("üîí –ì–æ—Ç–æ–≤–æ", callback_data="disabled"))

    return keyboard

menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add(
    KeyboardButton("üÜï –î–æ–±–∞–≤–∏—Ç—å"),
    KeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä")
)
menu_keyboard.add(
    KeyboardButton("üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
)

temp_repeating = {}

BOT_TOKEN = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

scheduler = BackgroundScheduler()
scheduler.start()
reminders = {}

WEBHOOK_URL = 'https://din-js6l.onrender.com'  

bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

from pytz import timezone, utc

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

moscow = timezone('Europe/Moscow')

def back_to_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return keyboard

import json

def load_reminders():
    global reminders
    try:
        with open("reminders.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            for user_id, user_reminders in data.items():
                reminders[int(user_id)] = user_reminders
    except FileNotFoundError:
        print("–§–∞–π–ª reminders.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")

def save_reminders():
    with open("reminders.json", "w", encoding="utf-8") as f:
        json.dump(reminders, f, ensure_ascii=False, indent=2, default=str)

def restore_jobs():
    for user_id, user_reminders in reminders.items():
        for rem in user_reminders:
            if rem["is_repeating"]:
                scheduler.add_job(
                    send_reminder,
                    trigger='interval',
                    days=1 if "–¥–µ–Ω—å" in rem["text"] else 7,
                    start_date=rem["time"],
                    args=[int(user_id), rem["text"].split(" (–ø–æ–≤—Ç.")[0], rem["time"].split("T")[1][:5], rem["job_id"]],
                    id=rem["job_id"]
                )
            else:
                rem_time = datetime.fromisoformat(rem["time"])
                if rem_time > datetime.utcnow():
                    scheduler.add_job(
                        send_reminder,
                        trigger='date',
                        run_date=rem_time,
                        args=[int(user_id), rem["text"], rem_time.strftime("%H:%M"), rem["job_id"]],
                        id=rem["job_id"]
                    )


def ensure_user_exists(user_id):
    if user_id not in reminders:
        reminders[user_id] = []


from telebot.types import BotCommand, BotCommandScopeChatMember

ADMIN_ID = 941791842  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.set_my_commands([
    BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    BotCommand("ping", "–ü—Ä–æ–≤–µ—Ä–∫–∞"),
    BotCommand("devmode", "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"),  # ‚Üê —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –º–µ–Ω—é –≤—Å–µ–º
])


import json
from datetime import datetime

def save_user_info(user):
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except FileNotFoundError:
        users = {}

    user_id = str(user.id)
    if user_id not in users:
        users[user_id] = {
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "joined_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        with open("users.json", "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id

    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω
    ensure_user_exists(user_id)
    save_user_info(message.from_user)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ "–æ–∂–∏–¥–∞—é—â–∏–µ —à–∞–≥–∏"
    bot.clear_step_handler_by_chat_id(message.chat.id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu_keyboard
    )

@bot.message_handler(func=lambda message: message.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å")

def handle_add(message):
    add_reminder(message)  # –í—ã–∑—ã–≤–∞–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ")  # –∏–ª–∏ logger.info(...)

@bot.message_handler(func=lambda message: message.text == "üîÅ –ü–æ–≤—Ç–æ—Ä")
def handle_repeat(message):
    add_repeating_reminder(message)

@bot.message_handler(func=lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å")
def handle_delete(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    if not reminders[user_id]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=menu_keyboard)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):", reply_markup=back_to_menu_keyboard())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, process_remove_input)
    
@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤.")
def handle_confirm(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    if not reminders[user_id]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=menu_keyboard)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):", reply_markup=back_to_menu_keyboard())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, process_repeat_selection)

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def back_to_main_menu(message):
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)

ADMIN_ID = 941791842  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

@bot.message_handler(commands=['devmode'])
def show_users(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "üìÇ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if not users:
        bot.send_message(message.chat.id, "üò∂ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    response = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for uid, data in users.items():
        name = data.get("first_name", "‚ùì")
        joined = data.get("joined_at", "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        response += f"\nüÜî {uid} ‚Äî {name}\nüïí –ó–∞—à—ë–ª: {joined}\n"

    bot.send_message(message.chat.id, response)

@bot.message_handler(commands=['ping'])
def test_ping(message):
    bot.send_message(message.chat.id, "–ü–∏–Ω–≥ –æ–∫!")

@bot.message_handler(commands=['dump'])
def dump_reminders(message):
    try:
        with open("reminders.json", "r", encoding="utf-8") as f:
            data = f.read()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–∏–¥–µ –∫–æ–¥–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç
        bot.send_message(message.chat.id, f"```json\n{data}\n```", parse_mode="Markdown")
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–§–∞–π–ª reminders.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def add_reminder(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú *—Å–æ–±—ã—Ç–∏–µ* –∏–ª–∏ –î–î.–ú–ú –ß–ß.–ú–ú *—Å–æ–±—ã—Ç–∏–µ*.", 	reply_markup=back_to_menu_keyboard())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, process_reminder)

def process_reminder(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)
    
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    now = datetime.now(moscow)

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
        ...

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminders[user_id].append({
            "time": reminder_datetime,
            "text": event,
            "job_id": job_id,
            "is_repeating": False,
            "needs_confirmation": False
        })
        save_reminders()

        scheduler.add_job(
            send_reminder,
            trigger='date',
            run_date=reminder_datetime,
            args=[user_id, event, reminder_datetime.strftime("%H:%M"), job_id],
            id=job_id
        )

        # üî• –í–æ—Ç –∑–¥–µ—Å—å –í–û–ó–í–†–ê–¢ –ö –ì–õ–ê–í–ù–û–ú–£ –ú–ï–ù–Æ
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {reminder_datetime_moscow.strftime('%d.%m %H:%M')} (MSK) ‚Äî {event}",
            reply_markup=menu_keyboard
        )

    except Exception:
        bot.send_message(
            message.chat.id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_menu_keyboard()
        )
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, process_reminder)
        
@bot.message_handler(func=lambda message: message.text == "üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
def show_reminders(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    if not reminders[user_id]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=menu_keyboard)
        return

    sorted_reminders = sorted(reminders[user_id], key=lambda item: item["time"])
    text = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"

    for i, rem in enumerate(sorted_reminders, start=1):
        msk_time = rem["time"].astimezone(moscow)
        line = f"{i}. {msk_time.strftime('%d.%m %H:%M')} ‚Äî {rem['text']}"

        if rem.get("is_repeating"):
            match = re.search(r"\(–ø–æ–≤—Ç\. (.+?)\)", rem.get("text", ""))
            if match:
                interval_text = match.group(1)
                line += f" üîÅ ({interval_text})"

        if rem.get("needs_confirmation"):
            interval = rem.get("repeat_interval", 30)
            line += f", üö® ({interval})"

        text += line + "\n"

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å"), types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤."))
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))

    bot.send_message(message.chat.id, text, reply_markup=keyboard)


ADMIN_ID = 941791842  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

@bot.message_handler(commands=['devmode'])
def show_users(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "üìÇ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if not users:
        bot.send_message(message.chat.id, "üò∂ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    response = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for uid, data in users.items():
        name = data.get("first_name", "")
        uname = f"@{data['username']}" if data.get('username') else "(–±–µ–∑ username)"
        joined = data.get("joined_at", "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        response += f"\nüÜî {uid} ‚Äî {name} {uname}\nüïí –ó–∞—à—ë–ª: {joined}\n"

    bot.send_message(message.chat.id, response)


def process_reminder(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)
    
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    moscow = timezone('Europe/Moscow')
    now = datetime.now(moscow)

    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω —Å –¥–∞—Ç–æ–π
        full_match = re.match(r'^(\d{1,2})\.(\d{1,2}) (\d{1,2})\.(\d{2}) (.+)', message.text)
        if full_match:
            day, month, hour, minute, event = full_match.groups()
            reminder_datetime_moscow = moscow.localize(datetime(
                year=now.year, month=int(month), day=int(day),
                hour=int(hour), minute=int(minute)
            ))
        else:
            # –ü–∞—Ç—Ç–µ—Ä–Ω —Ç–æ–ª—å–∫–æ —Å –≤—Ä–µ–º–µ–Ω–µ–º
            time_match = re.match(r'^(\d{1,2})\.(\d{2}) (.+)', message.text)
            if not time_match:
                raise ValueError
            hour, minute, event = time_match.groups()
            reminder_datetime_moscow = moscow.localize(datetime.combine(now.date(), datetime.strptime(f"{hour}.{minute}", "%H.%M").time()))
            if reminder_datetime_moscow < now:
                reminder_datetime_moscow += timedelta(days=1)

        reminder_datetime = reminder_datetime_moscow.astimezone(utc)

        job_id = str(uuid.uuid4())
        reminders[user_id].append({
            "time": reminder_datetime,
            "text": event,
            "job_id": job_id,
            "is_repeating": False,
            "needs_confirmation": False
        })
        save_reminders()

        scheduler.add_job(
            send_reminder,
            trigger='date',
            run_date=reminder_datetime,
            args=[user_id, event, reminder_datetime.strftime("%H:%M"), job_id],
            id=job_id
        )

        bot.send_message(message.chat.id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {reminder_datetime_moscow.strftime('%d.%m %H:%M')} (MSK) ‚Äî {event}", reply_markup=menu_keyboard)

    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_menu_keyboard())
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, process_reminder)

@bot.message_handler(func=lambda message: message.text == "–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def add_repeating_reminder(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú *—Å–æ–±—ã—Ç–∏–µ*.", reply_markup=back_to_menu_keyboard())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, ask_repeat_interval)

def ask_repeat_interval(message):

    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)
    
    user_id = message.from_user.id
    try:
        time_match = re.match(r'^(\d{1,2})\.(\d{2}) (.+)', message.text)
        if not time_match:
            raise ValueError

        hour, minute, event = time_match.groups()
        
        temp_repeating[user_id] = {
            "time_str": f"{hour}.{minute}",
            "event": event
        }

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"), types.KeyboardButton("–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"))
        bot.send_message(message.chat.id, "–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å?", reply_markup=keyboard)
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, process_repeating_interval)

    except:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, add_repeating_reminder)


def process_repeating_interval(message):

    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)
    
    user_id = message.from_user.id
    data = temp_repeating.get(user_id)
    
    if not data:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    time_str = data["time_str"]
    event = data["event"]
    
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    interval_input = message.text.strip().lower()

    interval = None
    if interval_input == "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å":
        interval = "–¥–µ–Ω—å"
    elif interval_input == "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é":
        selected_weekdays[message.from_user.id] = []
        bot.send_message(
            message.chat.id,
            "üóì –í—ã–±–µ—Ä–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞:\n(–Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã ‚úÖ)",
            reply_markup=create_weekday_keyboard(message.from_user.id)
        )
        return  # –≤—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, process_repeating_interval)
        return

    try:
        moscow = timezone('Europe/Moscow')
        now = datetime.now(moscow)
        time_obj = datetime.strptime(time_str, "%H.%M").time()
        first_run = moscow.localize(datetime.combine(now.date(), time_obj))

        if first_run < now:
            first_run += timedelta(days=1)

        first_run_utc = first_run.astimezone(utc)
        job_id = str(uuid.uuid4())

        reminder = {
            "time": first_run_utc,
            "text": event + f" (–ø–æ–≤—Ç. {interval})",
            "job_id": job_id,
            "is_repeating": True,
            "interval": interval,
            "needs_confirmation": needs_confirmation,
            "repeat_interval": 30,
            "id": job_id  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ ID
        }
        
        if interval == '–¥–µ–Ω—å':
            scheduler.add_job(send_reminder, 'interval', days=1, start_date=first_run_utc,
                              args=[user_id, event, time_str, job_id], id=job_id)
        elif interval == '–Ω–µ–¥–µ–ª—è':
            scheduler.add_job(send_reminder, 'interval', weeks=1, start_date=first_run_utc,
                              args=[user_id, event, time_str, job_id], id=job_id)
            if needs_confirmation:
                scheduler.add_job(
                    repeat_reminder_check,
                    'interval',
                    minutes=reminder["repeat_interval"] or 30,
                    args=[reminder, context],
                    id=f"repeat_{reminder['id']}",
                    replace_existing=True
                )
        
        reminders[user_id].append(reminder)
        
        save_reminders()
        form = "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å" if interval == "–¥–µ–Ω—å" else "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {first_run.strftime('%d.%m %H:%M')} (MSK) ‚Äî {event} {form}",
            reply_markup=menu_keyboard
        )

        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–º—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏: {e}")
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=ReplyKeyboardMarkup())

    del temp_repeating[user_id]

def process_remove_input(message):

    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)
    
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    try:
        reminder_indices = list(map(int, re.findall(r'\d+', message.text)))
        sorted_reminders = sorted(reminders[user_id], key=lambda item: item["time"])
        reminders_to_remove = [sorted_reminders[i - 1] for i in reminder_indices if 0 < i <= len(sorted_reminders)]
        for rem in reminders_to_remove:
            for job in scheduler.get_jobs():
                if job.id == rem["job_id"]:
                    job.remove()
            reminders[user_id].remove(rem)
        
        save_reminders()
        bot.send_message(message.chat.id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.", reply_markup=menu_keyboard)

    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=ReplyKeyboardMarkup())

def send_reminder(user_id, event, time, job_id):
    logger.info(f"[REMINDER] STARTED for user {user_id} | Event: {event} | Time: {time} | Job ID: {job_id}")
    try:
        reminder_time_utc = datetime.utcnow()
        reminder_time_msk = utc.localize(reminder_time_utc).astimezone(moscow).strftime('%H:%M')

        from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = None
        text_suffix = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        for rem in reminders.get(user_id, []):
            if rem["job_id"] == job_id and rem.get("needs_confirmation"):
                keyboard = InlineKeyboardMarkup()
                keyboard.row(
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{job_id}"),
                    InlineKeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip:{job_id}")
                )
                text_suffix = "\n\n–ù–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏:"
                break
        
        bot.send_message(
            user_id,
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event} (–≤ {reminder_time_msk} –ø–æ –ú–°–ö){text_suffix}",
            reply_markup=keyboard or ReplyKeyboardMarkup()
        )

        logger.info(f"[REMINDER] Sent to user {user_id}")
    except Exception as e:
        logger.error(f"[REMINDER ERROR] {e}")

    for rem in reminders.get(user_id, []):
        if rem["job_id"] == job_id:
            if rem.get("is_repeating"):
                return  # –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–∞–º–æ —Å–µ–±–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç
            if rem.get("needs_confirmation"):
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ repeat_interval –º–∏–Ω—É—Ç
                interval = rem.get("repeat_interval", 30)
                new_job_id = str(uuid.uuid4())
                scheduler.add_job(
                    send_reminder,
                    trigger='date',
                    run_date=datetime.utcnow() + timedelta(minutes=interval),
                    args=[user_id, event, time, new_job_id],
                    id=new_job_id
                )
                rem["job_id"] = new_job_id
                save_reminders()
            else:
                reminders[user_id] = [r for r in reminders[user_id] if r["job_id"] != job_id]
                save_reminders()

async def repeat_reminder_check(reminder, context):
    if reminder.confirmed:
        job = scheduler.get_job(f"repeat_{reminder.id}")
        if job:
            job.remove()
        return

    await send_reminder_with_confirmation(reminder, context)

async def send_reminder_with_confirmation(reminder, context):
    keyboard = [
        [InlineKeyboardButton("‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{reminder.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=reminder.chat_id,
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder.text}",
        reply_markup=reply_markup
    )

async def confirm_reminder(update, context):
    query = update.callback_query
    await query.answer()

    reminder_id = query.data.split('_')[1]
    for r in reminders:
        if str(r.id) == reminder_id:
            r.confirmed = True
            job = scheduler.get_job(f"repeat_{r.id}")
            if job:
                job.remove()
            save_reminders()
            await query.edit_message_text(text=f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {r.text}")
            break


@app.route("/", methods=["POST"])
def telegram_webhook():
    if request.headers.get("content-type") == "application/json":
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return "ok", 200
    return "Invalid request", 400

@app.route("/", methods=["GET"])
def root():
    return "It works!", 200

import threading
import requests
from time import sleep

def self_ping():
    while True:
        try:
            response = requests.head(WEBHOOK_URL)
            print(f"[PING] Status: {response.status_code}")
        except Exception as e:
            print(f"[PING ERROR] {e}")
        sleep(60)

@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤.")
def toggle_repeat_mode(message):
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    if not reminders[user_id]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=menu_keyboard)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.", reply_markup=back_to_menu_keyboard())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, process_repeat_selection)

def process_repeat_selection(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return back_to_main_menu(message)

    user_id = message.from_user.id
    ensure_user_exists(user_id)

    try:
        parts = message.text.strip().split()
        indices = list(map(int, [x for x in parts if x.isdigit()]))
        custom_interval = int(parts[-1]) if len(parts) >= 2 and parts[-1].isdigit() else 30

        sorted_reminders = sorted(reminders[user_id], key=lambda item: item["time"])

        for i in indices:
            if 0 < i <= len(sorted_reminders):
                rem = sorted_reminders[i - 1]
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º: –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –≤–∫–ª—é—á—ë–Ω ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º
                if rem.get("needs_confirmation"):
                    rem["needs_confirmation"] = False
                    rem.pop("repeat_interval", None)
                else:
                    rem["needs_confirmation"] = True
                    rem["repeat_interval"] = custom_interval

        save_reminders()
        bot.send_message(
            message.chat.id,
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ! –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {custom_interval} –º–∏–Ω. (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)",
            reply_markup=menu_keyboard
        )
    except Exception as e:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=ReplyKeyboardMarkup())
        logger.error(f"[REPEAT_SELECTION ERROR] {e}")

@bot.message_handler(commands=['done'])
def confirm_done(message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: /done <job_id>")
        return

    job_id = parts[1]
    user_id = message.from_user.id
    ensure_user_exists(user_id)

    for rem in reminders[user_id]:
        if rem["job_id"] == job_id:
            rem["needs_confirmation"] = False
            rem.pop("repeat_interval", None)
            try:
                scheduler.remove_job(job_id)
            except:
                pass
            save_reminders()
            bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´{rem['text']}¬ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.")
            return

    bot.send_message(message.chat.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm:") or call.data.startswith("skip:"))
def handle_confirmation(call):
    user_id = call.from_user.id
    ensure_user_exists(user_id)
    action, job_id = call.data.split(":")

    for rem in reminders[user_id]:
        if rem["job_id"] == job_id:
            if action == "confirm":
                rem["needs_confirmation"] = False
                rem.pop("repeat_interval", None)
                try:
                    scheduler.remove_job(job_id)
                except:
                    pass
                save_reminders()
                bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
                bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´{rem['text']}¬ª –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.")
            elif action == "skip":
                bot.answer_callback_query(call.id, "üîÑ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.")
            return

@bot.callback_query_handler(func=lambda call: call.data.startswith("weekday_"))
def handle_weekday_selection(call):
    user_id = call.from_user.id
    selected = selected_weekdays.get(user_id, [])
    day_index = int(call.data.split("_")[1])

    if day_index in selected:
        selected.remove(day_index)
    else:
        selected.append(day_index)

    selected_weekdays[user_id] = selected
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=create_weekday_keyboard(user_id)
    )

@bot.callback_query_handler(func=lambda call: call.data == "weekday_done")
def handle_weekday_done(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    selected = selected_weekdays.get(user_id, [])
    temp = temp_repeating.get(user_id)

    if not selected or not temp:
        bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å.")
        return

    try:
        hour, minute = map(int, temp["time_str"].split("."))
        moscow = timezone('Europe/Moscow')
        now = datetime.now(moscow)
        event = temp["event"]
        day_names = [DAYS_RU[i].lower()[:2] for i in selected]
        day_str = ", ".join(day_names)

        ensure_user_exists(user_id)
        created_times = []

        for weekday in selected:
            # –≤—ã—á–∏—Å–ª—è–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            days_ahead = (weekday - now.weekday() + 7) % 7
            target_date = now + timedelta(days=days_ahead)
            reminder_time = moscow.localize(datetime.combine(target_date.date(), datetime.strptime(temp["time_str"], "%H.%M").time()))
            reminder_utc = reminder_time.astimezone(utc)
            job_id = str(uuid.uuid4())

            scheduler.add_job(send_reminder, 'interval', weeks=1, start_date=reminder_utc,
                              args=[user_id, event, temp["time_str"], job_id], id=job_id)

            reminders[user_id].append({
                "time": reminder_utc,
                "text": f"{event} (–ø–æ–≤—Ç. –Ω–µ–¥–µ–ª—è {DAYS_RU[weekday].lower()[:2]})",
                "job_id": job_id,
                "is_repeating": True,
                "needs_confirmation": False
            })
            created_times.append(reminder_time.strftime('%a %H:%M'))

        save_reminders()

        bot.edit_message_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´{event}¬ª –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤: {', '.join(created_times)}",
            chat_id=chat_id,
            message_id=call.message.message_id,
            reply_markup=None
        )
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)

        del selected_weekdays[user_id]
        del temp_repeating[user_id]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_weekday_done: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard)
    
if __name__ == "__main__":
    load_reminders()
    restore_jobs()

    ping_thread = threading.Thread(target=self_ping)
    ping_thread.daemon = True
    ping_thread.start()
    app.run(host="0.0.0.0", port=10000)

# -*- coding: utf-8 -*-

# === 1. –ò–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
import os
import logging
import json
import re
import uuid
import threading
from time import sleep
from datetime import datetime, timedelta

import requests
from flask import Flask, request
import telebot
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone, utc

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.environ.get("BOT_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨")  # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEATHER_API_KEY = os.environ.get("WEATHER_API_KEY", "7c70d84340f4e9b9e99874cd465aefa8") # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = 941791842  # –í–∞—à Telegram ID
WEBHOOK_URL = 'https://din-js6l.onrender.com' # URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
scheduler = BackgroundScheduler(timezone=utc)
moscow_tz = timezone('Europe/Moscow')

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö) ---
reminders = {}
user_settings = {}  # { "user_id": {"city": "–ú–æ—Å–∫–≤–∞", "notification_time": "07:30", "notifications_on": False}}

# === 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞) ===

def save_data(data, filename):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON."""
    try:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4, default=str)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")

def load_data(filename, default_value):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON."""
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default_value
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {filename}. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default_value

# === 3. –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞")
    )
    return keyboard

def get_reminders_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"))
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return keyboard
    
def get_weather_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –ø–æ–≥–æ–¥—ã."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è"))
    keyboard.add(types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã"))
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return keyboard

def get_weather_settings_keyboard(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≥–æ–¥—ã."""
    settings = user_settings.get(str(user_id), {})
    notifications_on = settings.get('notifications_on', False)
    status_text = "‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if not notifications_on else "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"))
    keyboard.add(types.KeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è"))
    keyboard.add(types.KeyboardButton(status_text))
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã"))
    return keyboard

def get_back_to_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return keyboard

def create_reminder_inline_keyboard(reminder_id):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"rem_done_{reminder_id}"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"rem_delete_{reminder_id}")
    )
    return keyboard

# === 4. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def ensure_user_data_exists(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id_str = str(user_id)
    if user_id_str not in reminders:
        reminders[user_id_str] = []
    if user_id_str not in user_settings:
        user_settings[user_id_str] = {
            "city": "–ú–æ—Å–∫–≤–∞",
            "notification_time": "07:30",
            "notifications_on": False
        }

def parse_reminder_text(text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –∏ —Å–æ–±—ã—Ç–∏–µ."""
    now = datetime.now(moscow_tz)
    
    # –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú –ß–ß.–ú–ú —Å–æ–±—ã—Ç–∏–µ
    full_match = re.match(r'^(\d{1,2})[.,](\d{1,2})\s+(\d{1,2})[.,:](\d{2})\s+(.+)', text.strip())
    if full_match:
        day, month, hour, minute, event = full_match.groups()
        dt_moscow = moscow_tz.localize(datetime(now.year, int(month), int(day), int(hour), int(minute)))
        return dt_moscow, event

    # –§–æ—Ä–º–∞—Ç: –ß–ß.–ú–ú —Å–æ–±—ã—Ç–∏–µ
    time_match = re.match(r'^(\d{1,2})[.,:](\d{2})\s+(.+)', text.strip())
    if time_match:
        hour, minute, event = time_match.groups()
        dt_moscow = moscow_tz.localize(datetime(now.year, now.month, now.day, int(hour), int(minute)))
        if dt_moscow < now: # –µ—Å–ª–∏ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —Å—Ç–∞–≤–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            dt_moscow += timedelta(days=1)
        return dt_moscow, event

    return None, None
    
# === 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ===

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    ensure_user_data_exists(user_id)
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –£–º–µ—é —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É.",
        reply_markup=get_main_menu_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def handle_back_to_main_menu(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'."""
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())

# --- –ë–ª–æ–∫ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---

@bot.message_handler(func=lambda message: message.text in ["üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"])
def handle_reminders_menu(message):
    user_id = str(message.from_user.id)
    ensure_user_data_exists(user_id)
    
    if message.text == "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        user_reminders = reminders.get(user_id, [])
        if not user_reminders:
            bot.send_message(
                message.chat.id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤–æ–µ?",
                reply_markup=get_reminders_keyboard()
            )
            return

        bot.send_message(message.chat.id, "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=get_reminders_keyboard())
        sorted_reminders = sorted(user_reminders, key=lambda x: x['time'])
        for rem in sorted_reminders:
            dt_moscow = datetime.fromisoformat(rem['time']).astimezone(moscow_tz)
            text = f"üóìÔ∏è *{dt_moscow.strftime('%d.%m –≤ %H:%M')}*\n_{rem['text']}_"
            bot.send_message(
                message.chat.id,
                text,
                parse_mode='Markdown',
                reply_markup=create_reminder_inline_keyboard(rem['id'])
            )
    
    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ß–ß:–ú–ú —Å–æ–±—ã—Ç–∏–µ`\n–∏–ª–∏\n`–î–î.–ú–ú –ß–ß:–ú–ú —Å–æ–±—ã—Ç–∏–µ`",
            parse_mode='Markdown',
            reply_markup=get_back_to_menu_keyboard()
        )
        bot.register_next_step_handler(msg, process_new_reminder)

def process_new_reminder(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return handle_back_to_main_menu(message)
        
    user_id = str(message.from_user.id)
    ensure_user_data_exists(user_id)
    
    reminder_dt_moscow, event = parse_reminder_text(message.text)
    
    if not reminder_dt_moscow or not event:
        msg = bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ù–∞–ø—Ä–∏–º–µ—Ä: `19:30 –°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω`",
            parse_mode='Markdown',
            reply_markup=get_back_to_menu_keyboard()
        )
        bot.register_next_step_handler(msg, process_new_reminder)
        return

    reminder_dt_utc = reminder_dt_moscow.astimezone(utc)
    
    reminder_id = str(uuid.uuid4())
    new_reminder = {
        "id": reminder_id,
        "time": reminder_dt_utc.isoformat(),
        "text": event,
        "user_id": user_id
    }
    
    reminders[user_id].append(new_reminder)
    save_data(reminders, 'reminders.json')
    
    scheduler.add_job(
        send_reminder,
        trigger='date',
        run_date=reminder_dt_utc,
        args=[user_id, new_reminder],
        id=reminder_id
    )
    
    bot.send_message(
        message.chat.id,
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *{reminder_dt_moscow.strftime('%d.%m.%Y –≤ %H:%M')}*",
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('rem_'))
def handle_reminder_callback(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    user_id = str(call.from_user.id)
    action, reminder_id = call.data.split('_')[1:]

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    found_rem = None
    for rem in reminders.get(user_id, []):
        if rem['id'] == reminder_id:
            found_rem = rem
            break
            
    if not found_rem:
        bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="~~" + call.message.text + "~~", parse_mode='Markdown')
        return

    reminders[user_id].remove(found_rem)
    save_data(reminders, 'reminders.json')
    
    try:
        scheduler.remove_job(reminder_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞): {e}")

    if action == 'done':
        message_text = f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {found_rem['text']}"
    else: # delete
        message_text = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {found_rem['text']}"
        
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=message_text
    )
    bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ!")

# --- –ë–ª–æ–∫ –ü–æ–≥–æ–¥—ã ---

@bot.message_handler(func=lambda message: message.text == "üå§ –ü–æ–≥–æ–¥–∞")
def handle_weather_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–≥–æ–¥—ã."""
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_weather_menu_keyboard())

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã")
def handle_back_to_weather_menu(message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥—ã."""
    handle_weather_menu(message)
    
@bot.message_handler(func=lambda message: message.text == "üå¶ –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è")
def handle_today_weather(message):
    user_id = str(message.from_user.id)
    ensure_user_data_exists(user_id)
    city = user_settings.get(user_id, {}).get('city', '–ú–æ—Å–∫–≤–∞')
    
    bot.send_chat_action(message.chat.id, 'typing')
    
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        description = data['weather'][0]['description'].capitalize()
        temp = round(data['main']['temp'])
        feels_like = round(data['main']['feels_like'])
        wind = data['wind']['speed']
        
        weather_text = (
            f"üìç –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: *{city}*\n\n"
            f"{description}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *{temp}¬∞C*\n"
            f"üñêÔ∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: *{feels_like}¬∞C*\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å"
        )
        bot.send_message(message.chat.id, weather_text, parse_mode='Markdown')
        
    except requests.exceptions.RequestException:
        bot.send_message(message.chat.id, "üå¶Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")
        bot.send_message(message.chat.id, "üå¶Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥.")

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã")
def handle_weather_settings(message):
    user_id = str(message.from_user.id)
    ensure_user_data_exists(user_id)
    settings = user_settings[user_id]
    
    text = (
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã*\n\n"
        f"–ì–æ—Ä–æ–¥: *{settings.get('city', '–ù–µ –∑–∞–¥–∞–Ω')}*\n"
        f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: *{settings.get('notification_time', '07:30')}*\n"
        f"–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: *{'–í–∫–ª—é—á–µ–Ω—ã' if settings.get('notifications_on') else '–í—ã–∫–ª—é—á–µ–Ω—ã'}*"
    )
    
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=get_weather_settings_keyboard(user_id))

@bot.message_handler(func=lambda message: message.text == "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
def handle_change_city(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_city_input)

def process_city_input(message):
    user_id = str(message.from_user.id)
    city = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}"
    try:
        response = requests.get(url, timeout=5)
        if response.status_code != 200:
            bot.send_message(message.chat.id, f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_weather_menu_keyboard())
            return
    except requests.exceptions.RequestException:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_weather_menu_keyboard())
        return

    user_settings[user_id]['city'] = city
    save_data(user_settings, 'user_settings.json')
    bot.send_message(message.chat.id, f"‚úÖ –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *{city}*.", parse_mode='Markdown', reply_markup=get_weather_menu_keyboard())


# === 6. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ===

def send_reminder(user_id, reminder_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º."""
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_data['id']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    try:
        text = f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n_{reminder_data['text']}_"
        bot.send_message(
            user_id,
            text,
            parse_mode='Markdown',
            reply_markup=create_reminder_inline_keyboard(reminder_data['id'])
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_data['id']}: {e}")

def restore_jobs():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."""
    logger.info("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞ reminders.json...")
    loaded_reminders = load_data('reminders.json', {})
    reminders.update(loaded_reminders) # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    
    jobs_restored = 0
    for user_id, user_reminders in reminders.items():
        for rem in user_reminders:
            reminder_dt_utc = datetime.fromisoformat(rem['time']).astimezone(utc)
            if reminder_dt_utc > datetime.now(utc):
                scheduler.add_job(
                    send_reminder,
                    trigger='date',
                    run_date=reminder_dt_utc,
                    args=[user_id, rem],
                    id=rem['id'],
                    replace_existing=True
                )
                jobs_restored += 1
    logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {jobs_restored} –∑–∞–¥–∞—á.")


# === 7. Webhook –∏ –∑–∞–ø—É—Å–∫ ===

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    if request.headers.get("content-type") == "application/json":
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return "ok", 200
    return "Invalid request", 400

@app.route("/", methods=["GET"])
def root():
    return "Bot is running...", 200

def self_ping():
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ö–æ—Å—Ç–∏–Ω–≥–∞—Ö."""
    while True:
        try:
            requests.head(WEBHOOK_URL, timeout=10)
            logger.info(f"[PING] Self-ping successful.")
        except Exception as e:
            logger.error(f"[PING ERROR] {e}")
        sleep(300) # –ø–∏–Ω–≥—É–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    reminders.update(load_data('reminders.json', {}))
    user_settings.update(load_data('user_settings.json', {}))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    scheduler.start()
    restore_jobs()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL + '/' + BOT_TOKEN)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º self-ping –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    ping_thread = threading.Thread(target=self_ping)
    ping_thread.daemon = True
    ping_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 10000)))
